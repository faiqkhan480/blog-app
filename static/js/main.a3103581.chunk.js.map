{"version":3,"sources":["reducer/reducer.js","actions/actions.js","components/Home.js","components/Details.js","components/FormPage.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["data","details","loading","key","getDetail","postId","dispatch","a","axios","get","then","res","type","payload","catch","err","console","log","HomePage","this","props","posts","stateKey","id","localStorage","setItem","deletePost","Container","className","Spinner","animation","variant","style","width","height","Row","map","post","i","Col","lg","md","sm","xs","Card","border","Header","userId","Body","Title","title","to","onClick","setPostId","bind","Button","href","handleDelete","Component","connect","state","Details","getItem","Subtitle","Text","body","color","FormPage","setState","e","target","name","value","event","preventDefault","history","article","put","push","updatePost","createPost","Form","onSubmit","handleSubmit","Group","Label","Control","onChange","handleChange","placeholder","as","rows","Nav","clear","fluid","Navbar","Brand","Collapse","handleClick","App","exact","component","path","Boolean","window","location","hostname","match","store","createStore","action","updatedList","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a3103581.chunk.js","sourcesContent":["const data = {\r\n    data: [],\r\n    details: {},\r\n    loading: true,\r\n    key: true,\r\n};\r\n\r\nexport default (state = data, action) => {\r\n    switch (action.type) {\r\n        case 'POSTS':\r\n            return {\r\n                ...state,\r\n                data: action.payload,\r\n                loading: false,\r\n            };\r\n        case 'DETAILS':\r\n            return {\r\n                ...state,\r\n                details: action.payload,\r\n                key: false,\r\n            };\r\n\r\n        case 'UPDATE':\r\n            const updatedList = state.data.map((post) => {\r\n                if(post.id === action.payload.id){\r\n                    console.log(action.payload, 'console post map=-=-=-');\r\n                    return action.payload;\r\n                }\r\n                return post\r\n            });\r\n            return {\r\n                // ...state,\r\n                post: updatedList,\r\n                // loading: true,\r\n            };\r\n\r\n        case 'CREATE':\r\n            console.log(action.payload, 'action.payload');\r\n            return {\r\n                ...state,\r\n                data: [action.payload, ...state.data],\r\n                key: false,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","import axios from 'axios'\r\n\r\nexport const getPosts = () =>  async dispatch => {\r\n     await axios.get('https://jsonplaceholder.typicode.com/posts')\r\n        .then((res) => {\r\n            dispatch({\r\n                type: 'POSTS',\r\n                payload: res.data,\r\n            })\r\n            // console.log(res, 'axios response getPosts')\r\n        })\r\n        .catch(err => {console.log(err, 'from get the posts')})\r\n};\r\n\r\nexport const getDetail = (postId) =>  async dispatch => {\r\n    await axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}`)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: 'DETAILS',\r\n                payload: res.data,\r\n            });\r\n            // console.log(res.data, 'axios response postsDetails')\r\n        })\r\n        .catch(err => {console.log(err, 'from get the posts')})\r\n};\r\n\r\n\r\nexport const updatePost = (postId, article, history) =>  async dispatch => {\r\n    await axios.put(`https://jsonplaceholder.typicode.com/posts/${postId}`, article)\r\n        .then((res) => {\r\n            console.log('update post action')\r\n            dispatch({\r\n                type: 'UPDATE',\r\n                payload: res.data,\r\n            });\r\n            history.push('/')\r\n        })\r\n        .catch(err => {console.log(err, 'from get the posts')})\r\n};\r\n\r\nexport const createPost = (data, history) =>  async dispatch => {\r\n    console.log(data, 'action post')\r\n    await axios.post('https://jsonplaceholder.typicode.com/posts', data)\r\n        .then((res) => {\r\n            console.log('update post action')\r\n            dispatch({\r\n                type: 'CREATE',\r\n                payload: res.data,\r\n            });\r\n            history.push('/')\r\n        })\r\n        .catch(err => {console.log(err, 'from new the posts')})\r\n};\r\n\r\nexport const deletePost = (id) => ({\r\n    type: 'DEL_ITEMS',\r\n    payload: id,\r\n});","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {getPosts, deletePost} from \"../actions/actions\";\r\nimport {Button, Card, Col, Container, Navbar, Row, Spinner} from \"react-bootstrap\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nclass HomePage extends Component{\r\n    componentDidMount() {\r\n        console.log(this.props.posts, 'mount')\r\n        if (this.props.stateKey) {\r\n            this.props.dispatch(getPosts());\r\n        }\r\n    }\r\n\r\n    setPostId(id) {\r\n        localStorage.setItem('postId', id)\r\n    }\r\n\r\n    handleDelete(id) {\r\n        this.props.dispatch(deletePost(id));\r\n    }\r\n\r\n    render() {\r\n        const {posts, loading} = this.props;\r\n        return (\r\n            <div>\r\n                <Container className=\"App\">\r\n                    {loading ?\r\n                        <Container className=\"App-Loading\">\r\n                            <Spinner animation=\"border\" variant=\"primary\" style={{width: '9rem', height: '9rem'}}/>\r\n                        </Container>\r\n                        :\r\n                        <Row>\r\n                            {posts.map((post, i) => (\r\n                                <Col key={i} lg={4} md={6} sm={12} xs={12}>\r\n                                    <Card key={i} border=\"primary\"  className=\"my-2\">\r\n                                        <Card.Header>User: {post.userId}</Card.Header>\r\n                                        <Card.Body>\r\n                                            <Card.Title>{post.title}</Card.Title>\r\n                                            <NavLink to=\"/details\" onClick={this.setPostId.bind(this, post.id)} className=\"link btn btn-link\">Details</NavLink>\r\n                                            {/*<Button onClick={this.handleDetails.bind(this, post.id)}>Details</Button>*/}\r\n                                        </Card.Body>\r\n\r\n                                        <Card.Body>\r\n                                            <Button href=\"/form\"  onClick={this.setPostId.bind(this, post.id)} variant=\"primary\" className=\"m-3 w-25\">Edit</Button>\r\n                                            <Button variant=\"danger\" onClick={this.handleDelete.bind(this, post.id)} className=\"m-3 w-25\">Delete</Button>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </Col>\r\n                            ))}\r\n                        </Row>\r\n                    }\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.data,\r\n        loading: state.loading,\r\n        stateKey: state.key,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(HomePage)","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {getDetail} from \"../actions/actions\";\r\nimport {Button, Card, Container, Spinner} from \"react-bootstrap\";\r\n\r\nclass Details extends Component {\r\n    componentDidMount() {\r\n        const id = localStorage.getItem('postId');\r\n        console.log(id, 'id-==-=-')\r\n        console.log(this.props.data, 'data-==-=-')\r\n        this.props.dispatch(getDetail(id));\r\n    }\r\n\r\n    render() {\r\n        const {post, loading} = this.props;\r\n        console.log(loading, 'loading')\r\n        return (\r\n            <Container className=\"text-center my-5\">\r\n                {loading ?\r\n                    <Container className=\"App-Loading\">\r\n                        <Spinner animation=\"border\" variant=\"primary\" style={{width: '9rem', height: '9rem'}}/>\r\n                    </Container>\r\n                    :\r\n                    <Card border=\"info\">\r\n                        <Card.Body>\r\n                            <Card.Title>{post.title}</Card.Title>\r\n                            <Card.Subtitle className=\"mb-2 text-muted\">User: {post.userId}</Card.Subtitle>\r\n                            <Card.Text>\r\n                                {post.body}\r\n                            </Card.Text>\r\n                            <Button variant=\"outline-primary\" color=\"danger\" className=\"mx-3\">Edit</Button>\r\n                            <Button variant=\"outline-danger\" className=\"mx-3\">Delete</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                }\r\n            </Container>\r\n        );\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        data: state.data,\r\n        post: state.details,\r\n        loading: state.key,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Details)","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {createPost, getDetail, updatePost} from \"../actions/actions\";\r\nimport {Button, Container, Form, Spinner} from \"react-bootstrap\";\r\n\r\nclass FormPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: localStorage.getItem('postId'),\r\n            userId: '',\r\n            title: '',\r\n            body: '',\r\n        };\r\n        console.log('constructor runs')\r\n    }\r\n    async componentDidMount() {\r\n        if(this.state.id) {\r\n            await this.props.dispatch(getDetail(this.state.id));\r\n            console.log(this.props, 'componetDidMount')\r\n            this.setState({userId: this.props.post.userId, title: this.props.post.title, body: this.props.post.body})\r\n        }\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({[e.target.name] : e.target.value});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const {history} = this.props;\r\n        if(this.state.id) {\r\n            const article = {\r\n                userId: this.state.userId,\r\n                title: this.state.title,\r\n                body: this.state.body,\r\n            };\r\n            this.props.dispatch(updatePost(this.state.id, article, history));\r\n        } else {\r\n            const post = {\r\n                title: this.state.title,\r\n                body: this.state.body,\r\n            };\r\n            this.props.dispatch(createPost(post, history));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {post, loading} = this.props;\r\n        const {id, userId, title, body} = this.state;\r\n        return (\r\n            <Container className=\"text-center my-5\">\r\n                {loading ?\r\n                    <Container className=\"App-Loading\">\r\n                        <Spinner animation=\"border\" variant=\"primary\" style={{width: '9rem', height: '9rem'}}/>\r\n                    </Container>\r\n                    :\r\n                    <Form onSubmit={this.handleSubmit.bind(this)}>\r\n                        {id ?\r\n                            <Form.Group>\r\n                                <Form.Label>User Id</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"userId\"\r\n                                    value={userId}\r\n                                    onChange={this.handleChange.bind(this)}\r\n                                    placeholder=\"User Id\" />\r\n                            </Form.Group>\r\n                            : ''\r\n                        }\r\n\r\n                        <Form.Group>\r\n                            <Form.Label>Post Title</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                name=\"title\"\r\n                                value={title}\r\n                                onChange={this.handleChange.bind(this)}\r\n                                placeholder=\"Title\" />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Form.Label>Post</Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                rows=\"5\"\r\n                                name=\"body\"\r\n                                value={body}\r\n                                onChange={this.handleChange.bind(this)}\r\n                                placeholder=\"Post\" />\r\n                        </Form.Group>\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                    </Form>\r\n                }\r\n            </Container>\r\n        );\r\n    }\r\n\r\n}\r\nconst mapStateToProps = ({details, loading}) => {\r\n    return {\r\n        post: details,\r\n        loading: loading,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(FormPage)","import React, {Component} from \"react\";\r\nimport {Button, Container, Navbar} from \"react-bootstrap\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nclass Nav extends Component {\r\n    handleClick() {\r\n        localStorage.clear();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid className=\"shadow-sm mb-b sticky-top bg-white\">\r\n                <Navbar>\r\n                    <Navbar.Brand href=\"/\">Home</Navbar.Brand>\r\n                    <Navbar.Collapse className=\"justify-content-end\">\r\n                        <NavLink to=\"/form\" onClick={this.handleClick.bind(this)}>\r\n                            Create New Post\r\n                        </NavLink>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav","import React, {Component} from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport HomePage from \"./components/Home\";\nimport Details from \"./components/Details\";\nimport FormPage from \"./components/FormPage\";\nimport Nav from \"./components/Navbar\";\nimport {Button, Container, Navbar} from \"react-bootstrap\";\n\nclass App extends Component{\n  render() {\n    return (\n        <Router>\n            <Nav />\n            <Switch>\n                <Route exact component={HomePage} path='/' />\n                <Route exact component={Details} path='/details' />\n                <Route exact component={FormPage} path='/form' />\n                <Route/>\n            </Switch>\n        </Router>\n        // <div className=\"App\">\n        //   <HomePage />\n        // </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"./reducer/reducer\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}